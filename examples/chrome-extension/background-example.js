// Generated by js_of_ocaml 3.5.2
(function(joo_global_object)
   {"use strict";
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_blit_string(s1,i1,s2,i2,len)
     {return caml_blit_bytes(s1,i1,s2,i2,len)}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString = function(){return caml_to_js_string(this)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_new_string(s){return new MlBytes(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlBytes?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlBytes?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_bytes(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res !== 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlBytes)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=Buffer.from(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=Buffer.from(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=Buffer.from(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi){return [255,lo,mi,hi]}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x)
     {return [x[3] >> 8,
              x[3] & 0xff,
              x[2] >> 16,
              x[2] >> 8 & 0xff,
              x[2] & 0xff,
              x[1] >> 16,
              x[1] >> 8 & 0xff,
              x[1] & 0xff]}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return [255,
              a[7] | a[6] << 8 | a[5] << 16,
              a[4] | a[3] << 8 | a[2] << 16,
              a[1] | a[0] << 8]}
    function caml_int64_float_of_bits(x)
     {var lo=x[1],mi=x[2],hi=x[3],exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return [255,
              lo & 0xffffff,
              lo >>> 24 & 0xff | (hi & 0xffff) << 8,
              hi >>> 16 & 0xffff]}
    function caml_int64_hi32(v){return v[2] >>> 8 & 0xffff | v[3] << 16}
    function caml_int64_lo32(v){return v[1] | (v[2] & 0xff) << 24}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = "_bigarray";
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_ba_deserialize(reader,sz)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    if(! Math.imul)
     Math.imul
     =
     function(x,y){y |= 0;return ((x >> 16) * y << 16) + (x & 0xffff) * y | 0};
    var caml_mul=Math.imul;
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int64_hash(x)
     {var lo=x[1] | (x[2] & 0xff) << 24,hi=x[2] >>> 8 & 0xffff | x[3] << 16;
      return lo ^ hi}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:caml_ba_deserialize,
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(a instanceof MlBytes)
        return 252;
       else
        if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
         {var tag=a[0] | 0;return tag == 254?0:tag}
        else
         if(a instanceof String)
          return 1252;
         else
          if(typeof a == "string")
           return 1252;
          else
           if(a instanceof Number)
            return 1000;
           else
            if(a && a.caml_custom)
             return 1255;
            else
             if(a && a.compare)
              return 1256;
             else
              if(typeof a == "function")
               return 1247;
              else
               if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b)
              {var x=caml_string_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             var x=caml_int64_compare(a,b);if(x != 0)return x | 0;break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_js_from_array(a){return raw_array_sub(a,1,a.length - 1)}
    function caml_js_from_bool(x){return ! ! x}
    function caml_js_from_string(s){return s.toString()}
    function caml_js_get_console()
     {var
       c=joo_global_object.console?joo_global_object.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
      return c}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(! caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_string_length(s){return s.l}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,string,0,len)}
      var
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes(chanid,buffer,offset,len)}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(x instanceof MlBytes)
        return 252;
       else
        if(x instanceof Function || typeof x == "function")
         return 247;
        else
         if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_string_of_bytes(s){return s}
    function caml_sys_const_backend_type()
     {return [0,caml_new_string("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    var
     caml_argv=
      function()
        {var g=joo_global_object,main="a.out",args=[];
         if(g.process && g.process.argv && g.process.argv.length > 1)
          {var argv=g.process.argv;
           main = argv[1];
           args = raw_array_sub(argv,2,argv.length - 2)}
         var p=caml_js_to_string(main),args2=[0,p];
         for(var i=0;i < args.length;i++)
          args2.push(caml_js_to_string(args[i]));
         return args2}
       ();
    function caml_sys_get_argv(a){return [0,caml_argv[1],caml_argv]}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _f_=caml_new_string("output_substring"),
     _n_=caml_new_string("String.blit / Bytes.blit_string"),
     _m_=caml_new_string("Bytes.blit"),
     _r_=caml_new_string(""),
     _p_=caml_new_string("String.concat"),
     _x_=caml_new_string("Buffer.add_substring/add_subbytes"),
     _w_=caml_new_string("Buffer.add: cannot grow buffer"),
     _ac_=[3,0,3],
     _ad_=caml_new_string("."),
     ___=caml_new_string(">"),
     _$_=caml_new_string("<\/"),
     _X_=caml_new_string(">"),
     _Y_=caml_new_string("<"),
     _U_=caml_new_string("\n"),
     _B_=caml_new_string("Stdlib.Format.Empty_queue"),
     _Q_=[0,caml_new_string("")],
     _ao_=caml_new_string("Js_of_ocaml__Js.Error"),
     _aF_=caml_new_string(":"),
     _aE_=caml_new_string("}"),
     _aG_=caml_new_string(","),
     _aH_=caml_new_string("{"),
     _aI_=caml_new_string("cannot parse json "),
     _aB_=caml_new_string('"'),
     _aC_=caml_new_string('"'),
     _aN_=[0,caml_new_string("localhost")],
     _aM_=caml_new_string("color is green"),
     _aK_=caml_new_string("#3aa757"),
     _aL_=caml_new_string("color");
    function _a_(_eH_){throw [0,Invalid_argument,_eH_]}
    caml_fresh_oo_id(0);
    var _b_=2147483647;
    function _c_(_eD_,_eC_)
     {var
       _eE_=caml_ml_string_length(_eD_),
       _eF_=caml_ml_string_length(_eC_),
       _eG_=caml_create_bytes(_eE_ + _eF_ | 0);
      caml_blit_string(_eD_,0,_eG_,0,_eE_);
      caml_blit_string(_eC_,0,_eG_,_eE_,_eF_);
      return caml_string_of_bytes(_eG_)}
    caml_ml_open_descriptor_in(0);
    var
     _d_=caml_ml_open_descriptor_out(1),
     _e_=caml_ml_open_descriptor_out(2),
     _g_=
      [0,
       function(_eu_)
        {function _ev_(_ew_)
          {var _ex_=_ew_;
           for(;;)
            {if(_ex_)
              {var _ey_=_ex_[2],_ez_=_ex_[1];
               try
                {caml_ml_flush(_ez_)}
               catch(_eB_)
                {_eB_ = caml_wrap_exception(_eB_);
                 if(_eB_[1] !== Sys_error)throw _eB_;
                 var _eA_=_eB_}
               var _ex_=_ey_;
               continue}
             return 0}}
         return _ev_(caml_ml_out_channels_list(0))}];
    caml_sys_get_argv(0);
    var _j_=(4 * caml_sys_const_max_wosize(0) | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    typeof caml_sys_const_backend_type(0) === "number";
    function _k_(_er_,_eq_)
     {if(_eq_)
       {var _es_=_eq_[2],_et_=caml_call1(_er_,_eq_[1]);
        return [0,_et_,_k_(_er_,_es_)]}
      return 0}
    function _q_(_el_,_ek_)
     {if(_ek_)
       {var _em_=caml_ml_string_length(_el_),_eb_=0,_ea_=_ek_,_en_=0;
        for(;;)
         {if(_ea_)
           {var _ec_=_ea_[2],_ed_=_ea_[1];
            if(_ec_)
             {var
               _ee_=(caml_ml_string_length(_ed_) + _em_ | 0) + _eb_ | 0,
               _ef_=_eb_ <= _ee_?_ee_:_a_(_p_),
               _eb_=_ef_,
               _ea_=_ec_;
              continue}
            var _eo_=caml_ml_string_length(_ed_) + _eb_ | 0}
          else
           var _eo_=_eb_;
          var _ep_=caml_create_bytes(_eo_),_eh_=_en_,_eg_=_ek_;
          for(;;)
           {if(_eg_)
             {var _ei_=_eg_[2],_ej_=_eg_[1];
              if(_ei_)
               {caml_blit_string(_ej_,0,_ep_,_eh_,caml_ml_string_length(_ej_));
                caml_blit_string
                 (_el_,0,_ep_,_eh_ + caml_ml_string_length(_ej_) | 0,_em_);
                var
                 _eh_=(_eh_ + caml_ml_string_length(_ej_) | 0) + _em_ | 0,
                 _eg_=_ei_;
                continue}
              caml_blit_string(_ej_,0,_ep_,_eh_,caml_ml_string_length(_ej_))}
            return caml_string_of_bytes(_ep_)}}}
      return _r_}
    function _s_(_d5_)
     {if(_d5_)
       {var _d4_=0,_d3_=_d5_,_d6_=_d5_[2],_d7_=_d5_[1];
        for(;;)
         {if(_d3_){var _d4_=_d4_ + 1 | 0,_d3_=_d3_[2];continue}
          var _d8_=caml_make_vect(_d4_,_d7_),_d__=1,_d9_=_d6_;
          for(;;)
           {if(_d9_)
             {var _d$_=_d9_[2];
              _d8_[1 + _d__] = _d9_[1];
              var _d__=_d__ + 1 | 0,_d9_=_d$_;
              continue}
            return _d8_}}}
      return [0]}
    caml_fresh_oo_id(0);
    caml_fresh_oo_id(0);
    var _y_=[0,0];
    function _z_(_d2_){_y_[1] = [0,_d2_,_y_[1]];return 0}
    function _A_(_dZ_,_dY_)
     {var _d0_=[0,_dZ_,0],_d1_=_dY_[1];
      return _d1_
              ?(_dY_[1] = _d0_,_d1_[2] = _d0_,0)
              :(_dY_[1] = _d0_,_dY_[2] = _d0_,0)}
    var _C_=[248,_B_,caml_fresh_oo_id(0)];
    function _D_(_dU_)
     {var _dV_=_dU_[2];
      if(_dV_)
       {var _dX_=_dV_[2],_dW_=_dV_[1];
        _dU_[2] = _dX_;
        if(0 === _dX_)_dU_[1] = 0;
        return _dW_}
      throw _C_}
    function _E_(_dT_,_dS_)
     {_dT_[13] = _dT_[13] + _dS_[3] | 0;return _A_(_dS_,_dT_[28])}
    var _F_=1000000010;
    function _G_(_dR_,_dQ_)
     {return caml_call3(_dR_[17],_dQ_,0,caml_ml_string_length(_dQ_))}
    function _H_(_dP_){return caml_call1(_dP_[19],0)}
    function _I_(_dL_,_dK_,_dJ_)
     {_H_(_dL_);
      _dL_[11] = 1;
      var
       _dM_=(_dL_[6] - _dJ_ | 0) + _dK_ | 0,
       _dN_=_dL_[8],
       _dO_=caml_lessequal(_dN_,_dM_)?_dN_:_dM_;
      _dL_[10] = _dO_;
      _dL_[9] = _dL_[6] - _dL_[10] | 0;
      return caml_call1(_dL_[21],_dL_[10])}
    function _J_(_dI_,_dH_){return _I_(_dI_,0,_dH_)}
    function _K_(_dG_,_dF_)
     {_dG_[9] = _dG_[9] - _dF_ | 0;return caml_call1(_dG_[20],_dF_)}
    function _L_(_dy_)
     {var _dz_=_dy_[2];
      if(_dz_)
       {var _dA_=_dz_[1],_dB_=_dA_[2],_dC_=_dA_[1],_dD_=_dy_[9] < _dB_?1:0;
        if(_dD_)
         {if(0 !== _dC_)return 5 <= _dC_?0:_J_(_dy_,_dB_);var _dE_=0}
        else
         var _dE_=_dD_;
        return _dE_}
      return _H_(_dy_)}
    function _M_(_dv_)
     {var _dw_=_D_(_dv_[28]),_dx_=_dw_[1];
      _dv_[12] = _dv_[12] - _dw_[3] | 0;
      _dv_[9] = _dv_[9] + _dx_ | 0;
      return 0}
    function _N_(_cQ_,_cP_,_cO_)
     {if(typeof _cO_ === "number")
       switch(_cO_)
        {case 0:
          var _cR_=_cQ_[3];
          if(_cR_)
           {var
             _cS_=_cR_[1][1],
             _cT_=
              function(_dm_,_dl_)
               {if(_dl_)
                 {var _do_=_dl_[1],_dn_=_dl_[2];
                  return caml_lessthan(_dm_,_do_)
                          ?[0,_dm_,_dl_]
                          :[0,_do_,_cT_(_dm_,_dn_)]}
                return [0,_dm_,0]};
            _cS_[1] = _cT_(_cQ_[6] - _cQ_[9] | 0,_cS_[1]);
            return 0}
          return 0;
         case 1:var _cU_=_cQ_[2];return _cU_?(_cQ_[2] = _cU_[2],0):0;
         case 2:var _cV_=_cQ_[3];return _cV_?(_cQ_[3] = _cV_[2],0):0;
         case 3:var _cW_=_cQ_[2];return _cW_?_J_(_cQ_,_cW_[1][2]):_H_(_cQ_);
         case 4:
          var _cX_=_cQ_[10] !== (_cQ_[6] - _cQ_[9] | 0)?1:0;
          return _cX_?_M_(_cQ_):_cX_;
         default:
          var _cY_=_cQ_[5];
          if(_cY_)
           {var _cZ_=_cY_[2];
            _G_(_cQ_,caml_call1(_cQ_[25],_cY_[1]));
            _cQ_[5] = _cZ_;
            return 0}
          return 0}
      else
       switch(_cO_[0])
        {case 0:
          var _c0_=_cO_[1];
          _cQ_[9] = _cQ_[9] - _cP_ | 0;
          _G_(_cQ_,_c0_);
          _cQ_[11] = 0;
          return 0;
         case 1:
          var _c1_=_cO_[2],_c2_=_cO_[1],_c3_=_cQ_[2];
          if(_c3_)
           {var _c4_=_c3_[1],_c5_=_c4_[2];
            switch(_c4_[1])
             {case 0:return _K_(_cQ_,_c2_);
              case 1:return _I_(_cQ_,_c1_,_c5_);
              case 2:return _I_(_cQ_,_c1_,_c5_);
              case 3:return _cQ_[9] < _cP_?_I_(_cQ_,_c1_,_c5_):_K_(_cQ_,_c2_);
              case 4:
               return _cQ_[11]
                       ?_K_(_cQ_,_c2_)
                       :_cQ_[9] < _cP_
                         ?_I_(_cQ_,_c1_,_c5_)
                         :((_cQ_[6] - _c5_ | 0) + _c1_ | 0) < _cQ_[10]
                           ?_I_(_cQ_,_c1_,_c5_)
                           :_K_(_cQ_,_c2_);
              default:return _K_(_cQ_,_c2_)}}
          return 0;
         case 2:
          var
           _c8_=_cQ_[6] - _cQ_[9] | 0,
           _c9_=_cQ_[3],
           _c6_=_cO_[2],
           _c7_=_cO_[1];
          if(_c9_)
           {var
             _c__=_c9_[1][1],
             _c$_=
              function(_dr_,_dq_)
               {var _ds_=_dq_;
                for(;;)
                 {if(_ds_)
                   {var _du_=_ds_[1],_dt_=_ds_[2];
                    if(caml_greaterequal(_du_,_dr_))return _du_;
                    var _ds_=_dt_;
                    continue}
                  throw Not_found}},
             _da_=_c__[1];
            if(_da_)
             {var _db_=_da_[1];
              try
               {var _df_=_c$_(_c8_,_c__[1]),_dc_=_df_}
              catch(_dp_)
               {_dp_ = caml_wrap_exception(_dp_);
                if(_dp_ !== Not_found)throw _dp_;
                var _dc_=_db_}
              var _dd_=_dc_}
            else
             var _dd_=_c8_;
            var _de_=_dd_ - _c8_ | 0;
            return 0 <= _de_
                    ?_K_(_cQ_,_de_ + _c7_ | 0)
                    :_I_(_cQ_,_dd_ + _c6_ | 0,_cQ_[6])}
          return 0;
         case 3:
          var _dg_=_cO_[2],_dh_=_cO_[1];
          if(_cQ_[8] < (_cQ_[6] - _cQ_[9] | 0))_L_(_cQ_);
          var _di_=_cQ_[9] - _dh_ | 0,_dj_=1 === _dg_?1:_cQ_[9] < _cP_?_dg_:5;
          _cQ_[2] = [0,[0,_dj_,_di_],_cQ_[2]];
          return 0;
         case 4:_cQ_[3] = [0,_cO_[1],_cQ_[3]];return 0;
         default:
          var _dk_=_cO_[1];
          _G_(_cQ_,caml_call1(_cQ_[24],_dk_));
          _cQ_[5] = [0,_dk_,_cQ_[5]];
          return 0}}
    function _O_(_cG_)
     {for(;;)
       {var _cE_=_cG_[28][2];
        if(_cE_)
         {var
           _cF_=_cE_[1],
           _cH_=_cF_[1],
           _cK_=_cH_ < 0?1:0,
           _cI_=_cF_[3],
           _cJ_=_cF_[2],
           _cL_=_cK_?(_cG_[13] - _cG_[12] | 0) < _cG_[9]?1:0:_cK_,
           _cM_=1 - _cL_;
          if(_cM_)
           {_D_(_cG_[28]);
            var _cN_=0 <= _cH_?_cH_:_F_;
            _N_(_cG_,_cN_,_cJ_);
            _cG_[12] = _cI_ + _cG_[12] | 0;
            continue}
          return _cM_}
        throw _C_}}
    function _P_(_cB_)
     {try
       {var _cC_=_O_(_cB_);return _cC_}
      catch(_cD_)
       {_cD_ = caml_wrap_exception(_cD_);if(_cD_ === _C_)return 0;throw _cD_}}
    var _R_=[0,[0,-1,[0,-1,_Q_,0]],0];
    function _S_(_cA_){_cA_[1] = _R_;return 0}
    function _T_(_cq_,_cp_)
     {var _cr_=_cq_[1];
      if(_cr_)
       {var _cs_=_cr_[1],_ct_=_cs_[2],_cu_=_ct_[1],_cv_=_cr_[2],_cw_=_ct_[2];
        if(_cs_[1] < _cq_[12])return _S_(_cq_);
        if(typeof _cw_ !== "number")
         switch(_cw_[0])
          {case 3:
            var
             _cy_=1 - _cp_,
             _cz_=_cy_?(_ct_[1] = _cq_[13] + _cu_ | 0,_cq_[1] = _cv_,0):_cy_;
            return _cz_;
           case 1:
           case 2:
            var
             _cx_=
              _cp_?(_ct_[1] = _cq_[13] + _cu_ | 0,_cq_[1] = _cv_,0):_cp_;
            return _cx_
           }
        return 0}
      return 0}
    var _l_=caml_create_bytes(80);
    caml_fill_bytes(_l_,0,80,32);
    var _o_=caml_string_of_bytes(_l_);
    function _V_(_cm_,_cl_)
     {var _cn_=_cl_;
      for(;;)
       {var _co_=0 < _cn_?1:0;
        if(_co_)
         {if(80 < _cn_)
           {caml_call3(_cm_[17],_o_,0,80);var _cn_=_cn_ - 80 | 0;continue}
          return caml_call3(_cm_[17],_o_,0,_cn_)}
        return _co_}}
    function _W_(_ck_){return _c_(_Y_,_c_(_ck_,_X_))}
    function _Z_(_cj_){return _c_(_$_,_c_(_cj_,___))}
    function _aa_(_ci_){return 0}
    function _ab_(_ch_){return 0}
    function _ae_(_b9_,_b8_)
     {function _b__(_cg_){return 0}
      function _b$_(_cf_){return 0}
      var _b5_=[0,0,0],_b6_=[0,-1,_ac_,0];
      function _ca_(_ce_){return 0}
      _A_(_b6_,_b5_);
      var
       _b7_=
        [0,
         [0,[0,1,_b6_],_R_],
         0,
         0,
         0,
         0,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         _b_,
         _ad_,
         _b9_,
         _b8_,
         _ca_,
         _b$_,
         _b__,
         0,
         0,
         _W_,
         _Z_,
         _aa_,
         _ab_,
         _b5_];
      _b7_[19] = function(_cd_){return caml_call3(_b7_[17],_U_,0,1)};
      _b7_[20] = function(_cc_){return _V_(_b7_,_cc_)};
      _b7_[21] = function(_cb_){return _V_(_b7_,_cb_)};
      return _b7_}
    function _af_(_bZ_)
     {function _b0_(_b4_){return caml_ml_flush(_bZ_)}
      return _ae_
              (function(_b1_,_b2_,_b3_)
                {if(0 <= _b2_)
                  if(0 <= _b3_)
                   if(! ((caml_ml_string_length(_b1_) - _b3_ | 0) < _b2_))
                    return caml_ml_output(_bZ_,_b1_,_b2_,_b3_);
                 return _a_(_f_)},
               _b0_)}
    var
     _ah_=512,
     _t_=_j_ < 512?_j_:_ah_,
     _u_=caml_create_bytes(_t_),
     _v_=[0,_u_,0,_t_,_u_],
     _ai_=_af_(_d_);
    _af_(_e_);
    function _ag_(_bY_){return 0}
    _ae_
     (function(_bV_,_bW_,_bX_)
       {var _bP_=_bW_ < 0?1:0;
        if(_bP_)
         var _bQ_=_bP_;
        else
         var
          _bU_=_bX_ < 0?1:0,
          _bQ_=_bU_ || ((caml_ml_string_length(_bV_) - _bX_ | 0) < _bW_?1:0);
        if(_bQ_)_a_(_x_);
        var _bR_=_v_[2] + _bX_ | 0;
        if(_v_[3] < _bR_)
         {var _bL_=[0,_v_[3]];
          for(;;)
           {if(_bL_[1] < (_v_[2] + _bX_ | 0))
             {_bL_[1] = 2 * _bL_[1] | 0;continue}
            if(_j_ < _bL_[1])
             {if(! ((_v_[2] + _bX_ | 0) <= _j_))throw [0,Failure,_w_];
              _bL_[1] = _j_}
            var
             _bM_=caml_create_bytes(_bL_[1]),
             _bN_=_v_[2],
             _bO_=_v_[1],
             switch$0=
              0 <= _bN_
               ?(caml_ml_bytes_length(_bO_) - _bN_ | 0) < 0
                 ?0
                 :(caml_ml_bytes_length(_bM_) - _bN_ | 0) < 0
                   ?0
                   :(caml_blit_bytes(_bO_,0,_bM_,0,_bN_),1)
               :0;
            if(! switch$0)_a_(_m_);
            _v_[1] = _bM_;
            _v_[3] = _bL_[1];
            break}}
        var
         _bS_=_v_[2],
         _bT_=_v_[1],
         switch$1=
          0 <= _bX_
           ?0 <= _bW_
             ?(caml_ml_string_length(_bV_) - _bX_ | 0) < _bW_
               ?0
               :0 <= _bS_
                 ?(caml_ml_bytes_length(_bT_) - _bX_ | 0) < _bS_
                   ?0
                   :(caml_blit_string(_bV_,_bW_,_bT_,_bS_,_bX_),1)
                 :0
             :0
           :0;
        if(! switch$1)_a_(_n_);
        _v_[2] = _bR_;
        return 0},
      _ag_);
    var _i_=[0,0],_h_=_g_[1];
    _g_[1]
    =
    function(_bA_)
     {if(1 - _i_[1])
       {_i_[1] = 1;
        var _bB_=_ai_[4];
        for(;;)
         {if(_bB_)
           {var _bC_=_bB_[2];
            if(_ai_[23])_E_(_ai_,[0,0,5,0]);
            if(_ai_[22])
             {var _bJ_=_ai_[4];
              if(_bJ_)
               {var _bK_=_bJ_[2];
                caml_call1(_ai_[27],_bJ_[1]);
                _ai_[4] = _bK_;
                var switch$0=1}
              else
               var switch$0=0}
            else
             var switch$0=0;
            var _bB_=_bC_;
            continue}
          for(;;)
           {if(1 < _ai_[14])
             {if(1 < _ai_[14])
               {if(_ai_[14] < _ai_[15])
                 {_E_(_ai_,[0,0,1,0]);_T_(_ai_,1);_T_(_ai_,0)}
                _ai_[14] = _ai_[14] - 1 | 0}
              continue}
            _ai_[13] = _F_;
            _P_(_ai_);
            _ai_[12] = 1;
            _ai_[13] = 1;
            var _bD_=_ai_[28];
            _bD_[1] = 0;
            _bD_[2] = 0;
            _S_(_ai_);
            _ai_[2] = 0;
            _ai_[3] = 0;
            _ai_[4] = 0;
            _ai_[5] = 0;
            _ai_[10] = 0;
            _ai_[14] = 0;
            _ai_[9] = _ai_[6];
            _ai_[14] = _ai_[14] + 1 | 0;
            var _bH_=3,_bI_=0;
            if(_ai_[14] < _ai_[15])
             {var _bF_=[0,- _ai_[13] | 0,[3,_bI_,_bH_],0];
              _E_(_ai_,_bF_);
              _ai_[1] = [0,[0,_ai_[13],_bF_],_ai_[1]]}
            else
             if(_ai_[14] === _ai_[15])
              {var _bG_=_ai_[16],_bE_=caml_ml_string_length(_bG_);
               _E_(_ai_,[0,_bE_,[0,_bG_],_bE_]);
               _P_(_ai_)}
            caml_call1(_ai_[18],0);
            break}
          break}}
      return caml_call1(_h_,0)};
    var _ak_=joo_global_object,_al_=undefined;
    function _am_(_bz_){return _bz_?_bz_[1]:_al_}
    var
     _an_=_ak_.Array,
     _ap_=[248,_ao_,caml_fresh_oo_id(0)],
     _aq_=[0,_ap_,{}],
     _aj_=caml_obj_tag(_aq_) === 248?_aq_:_aq_[1];
    caml_register_named_value(caml_new_string("jsError"),_aj_);
    (function(exn){throw exn});
    var _ar_=_ak_.JSON;
    _z_
     (function(_by_)
       {return _by_[1] === _ap_?[0,caml_js_to_string(_by_[2].toString())]:0});
    _z_
     (function(_bx_)
       {return _bx_ instanceof _an_?0:[0,caml_js_to_string(_bx_.toString())]});
    caml_fresh_oo_id(0);
    _ak_.HTMLElement === _al_;
    var _as_=caml_js_get_console(0);
    function _at_(_bw_){return caml_js_from_array(_s_(_bw_))}
    function _au_(_bu_,_bt_)
     {var _bv_=_s_(_bt_),_bm_=_bv_.length - 1;
      if(0 === _bm_)
       var _bs_=[0];
      else
       {var
         _bn_=caml_make_vect(_bm_,caml_call1(_bu_,_bv_[1])),
         _bp_=_bm_ - 1 | 0,
         _bo_=1;
        if(! (_bp_ < 1))
         {var _bq_=_bo_;
          for(;;)
           {_bn_[1 + _bq_] = caml_call1(_bu_,_bv_[1 + _bq_]);
            var _br_=_bq_ + 1 | 0;
            if(_bp_ !== _bq_){var _bq_=_br_;continue}
            break}}
        var _bs_=_bn_}
      return caml_js_from_array(_bs_)}
    function _av_(_bl_,_bk_){return _bk_?caml_call1(_bl_,_bk_[1]):_al_}
    function _aw_(_bj_){return _as_.log(_bj_.toString())}
    var
     _az_=chrome.declarativeContent,
     _ax_=chrome.runtime,
     _ay_=chrome.storage.sync;
    function _aA_(_bi_){return _c_(_aC_,_c_(_bi_,_aB_))}
    function _aD_(_bc_)
     {var
       _bd_=
        _c_
         (_aH_,
          _c_
           (_q_
             (_aG_,
              _k_
               (function(_bg_)
                 {var _bh_=_c_(_aF_,_bg_[2]);return _c_(_aA_(_bg_[1]),_bh_)},
                _bc_)),
            _aE_));
      try
       {var _be_=_ar_.parse(_bd_.toString());return _be_}
      catch(_bf_){_aw_(_c_(_aI_,_bd_));return {}}}
    function _aJ_(_aR_)
     {var _aS_=_aD_([0,[0,_aL_,_aA_(_aK_)],0]);
      _ay_.set
       (_aS_,
        _av_(caml_js_wrap_callback,[0,function(_bb_){return _aw_(_aM_)}]));
      var
       _aT_=0,
       _aO_=
        caml_js_wrap_callback
         (function(_a3_)
           {var _aV_={};
            _aV_.hostContains = _av_(caml_js_from_string,0);
            _aV_.hostEquals = _av_(caml_js_from_string,_aN_);
            _aV_.hostPrefix = _av_(caml_js_from_string,0);
            _aV_.hostSuffix = _av_(caml_js_from_string,0);
            _aV_.pathContains = _av_(caml_js_from_string,0);
            _aV_.pathPrefix = _av_(caml_js_from_string,0);
            _aV_.pathSuffix = _av_(caml_js_from_string,0);
            _aV_.queryContains = _av_(caml_js_from_string,0);
            _aV_.queryEquals = _av_(caml_js_from_string,0);
            _aV_.queryPrefix = _av_(caml_js_from_string,0);
            _aV_.querySuffix = _av_(caml_js_from_string,0);
            _aV_.urlContains = _av_(caml_js_from_string,0);
            _aV_.urlEquals = _av_(caml_js_from_string,0);
            _aV_.urlMatches = _av_(caml_js_from_string,0);
            _aV_.originAndPathMatches = _av_(caml_js_from_string,0);
            _aV_.urlPrefix = _av_(caml_js_from_string,0);
            _aV_.urlSuffix = _av_(caml_js_from_string,0);
            var _a4_=0,_a5_=0,_a6_=0,_a7_=0,_aW_=caml_js_from_string;
            _aV_.schemes = _av_(function(_ba_){return _au_(_aW_,_ba_)},_a7_);
            _aV_.ports = _am_(_a6_);
            var _aX_={};
            _aX_.pageUrl = _am_([0,_aV_]);
            var _aY_=caml_js_from_string;
            _aX_.css = _av_(function(_a$_){return _au_(_aY_,_a$_)},_a5_);
            _aX_.isBookmarked = _av_(caml_js_from_bool,_a4_);
            var
             _aZ_=new (_az_.PageStateMatcher)(_aX_),
             _a0_={},
             _a8_=[0,new (_az_.ShowPageAction)(),0];
            _a0_.conditions = _at_([0,_aZ_,0]);
            _a0_.actions = _at_(_a8_);
            _a0_.priority = _am_(0);
            _a0_.id = _av_(caml_js_from_string,0);
            var
             _a9_=[0,_a0_,0],
             _a1_=caml_js_wrap_callback(function(_a__){return 0}),
             _a2_=_at_(_a9_);
            return _az_.onPageChanged.addRules(_a2_,_a1_)}),
       _aP_=caml_js_from_string,
       _aQ_=_av_(function(_aU_){return _au_(_aP_,_aU_)},_aT_);
      return _az_.onPageChanged.removeRules(_aQ_,_aO_)}
    _ax_.onInstalled.addListener(_aJ_);
    caml_call1(_g_[1],0);
    return}
  (function(){return this}()));
